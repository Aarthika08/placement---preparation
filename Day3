Day3

                                                     shopup preparation-3
                                                           Data Structures




1 Implement a stack using an linked list

print(": Implement a stack using an linked list")
class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
        
        
class Stack:  
    def __init__(self):
        self.head=None
        
    def isempty(self):
        if self.head == None:
            return True
        else:
            return False    
    def push(self,data):
        if self.head==None:
            self.head=Node(data)
        else:
            Newnode=Node(data)
            Newnode.next=self.head
            self.head=Newnode
    def pop(self):  
        if self.isempty():
            return None
        else:
            pNewnode=self.head
            self.head=self.head.next
            pNewnode.next=None
            return pNewnode.data
    def peek(self):  
        if self.isempty():
            return None
 
        else:
            return self.head.data
 
             
    def display(self):
        # i=self.head
        # if i==None:
        #     return True
        # else:
             
        #      while(i!=None):
        #          print(i.val)
        #          i=i.next
        #      return  
        iternode = self.head
        if self.isempty():
            print("Stack Underflow")
 
        else:
 
            while(iternode != None):
 
                print(iternode.data, end = "")
                iternode = iternode.next
                if(iternode != None):
                    print(" -> ", end = "")
            return


            
MyStack = Stack()
   
MyStack.push(11)
MyStack.push(22)
MyStack.push(33)
MyStack.push(44)
 
  # Display stack elements
MyStack.display()
 
  # Print top element of stack
print("\nTop element is ", MyStack.peek())
 
  # Delete top elements of stack
MyStack.pop()
MyStack.pop()
 
  # Display stack elements
MyStack.display()
 
  # Print top element of stack
print("\nTop element is ", MyStack.peek())



In arrays
a=[1,2,3,4]
a.append('a')
a.append('b')
a.append('c')

print(a.pop())
print(a)
print(a.pop())
print(a)
print(a.pop())
print(a)
print(a.pop())
print(a.pop())
print(a.pop())
print(a)


leetcode problems
You are given an integer array target and an integer n.

You have an empty stack with the two following operations:

"Push": pushes an integer to the top of the stack.
"Pop": removes the integer on the top of the stack.
You also have a stream of the integers in the range [1, n].

Use the two stack operations to make the numbers in the stack (from the bottom to the top) equal to target. You should follow the following rules:

If the stream of the integers is not empty, pick the next integer from the stream and push it to the top of the stack.
If the stack is not empty, pop the integer at the top of the stack.
If, at any moment, the elements in the stack (from the bottom to the top) are equal to target, do not read new integers from the stream and do not do more operations on the stack.
Return the stack operations needed to build target following the mentioned rules. If there are multiple valid answers, return any of them.

 

Example 1:

Input: target = [1,3], n = 3
Output: ["Push","Push","Pop","Push"]
Explanation: Initially the stack s is empty. The last element is the top of the stack.
Read 1 from the stream and push it to the stack. s = [1].
Read 2 from the stream and push it to the stack. s = [1,2].
Pop the integer on the top of the stack. s = [1].
Read 3 from the stream and push it to the stack. s = [1,3].
Example 2:

Input: target = [1,2,3], n = 3
Output: ["Push","Push","Push"]
Explanation: Initially the stack s is empty. The last element is the top of the stack.
Read 1 from the stream and push it to the stack. s = [1].
Read 2 from the stream and push it to the stack. s = [1,2].
Read 3 from the stream and push it to the stack. s = [1,2,3].
Example 3:

Input: target = [1,2], n = 4
Output: ["Push","Push"]
Explanation: Initially the stack s is empty. The last element is the top of the stack.
Read 1 from the stream and push it to the stack. s = [1].
Read 2 from the stream and push it to the stack. s = [1,2].
Since the stack (from the bottom to the top) is equal to target, we stop the stack operations.
The answers that read integer 3 from the stream are not accepted.
 

Constraints:

1 <= target.length <= 100
1 <= n <= 100
1 <= target[i] <= n
target is strictly increasing.

solution
class Solution:
    def buildArray(self, target: List[int], n: int) -> List[str]:
        l=[]
        for i in range(1,max(target)+1):
            if i in target:
                l.append('Push')
            else:    
                l.append('Push')
                l.append('Pop')
        return l          
        
     --------------------------------------------------------------------------------------------------------------------------------------
     
     
     55. Min Stack
Medium
11.7K
737
Companies
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:

MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
You must implement a solution with O(1) time complexity for each function.

 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 

Constraints:

-231 <= val <= 231 - 1
Methods pop, top and getMin operations will always be called on non-empty stacks.
At most 3 * 104 calls will be made to push, pop, top, and getMin.


solution

class MinStack:

    def __init__(self):
        self.minstack=[]

    def push(self, val: int) -> None:
        self.minstack.append(val)


    def pop(self) -> None:
       self.minstack.pop()

    def top(self) -> int:

       return self.minstack[-1]

    def getMin(self) -> int:
      if self.minstack:  # check if minimum stack is not empty
            return min(self.minstack)  # return the current minimum valu
       
        


# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(val)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()
--------------------------------------------------------------------------------------------------------------------------------------------------------

225. Implement Stack using Queues
Easy
4.4K
994
Companies
Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).

Implement the MyStack class:

void push(int x) Pushes element x to the top of the stack.
int pop() Removes the element on the top of the stack and returns it.
int top() Returns the element on the top of the stack.
boolean empty() Returns true if the stack is empty, false otherwise.
Notes:

You must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.
Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.
 

Example 1:

Input
["MyStack", "push", "push", "top", "pop", "empty"]
[[], [1], [2], [], [], []]
Output
[null, null, null, 2, 2, false]

Explanation
MyStack myStack = new MyStack();
myStack.push(1);
myStack.push(2);
myStack.top(); // return 2
myStack.pop(); // return 2
myStack.empty(); // return False
 

Constraints:

1 <= x <= 9
At most 100 calls will be made to push, pop, top, and empty.
All the calls to pop and top are valid.

solution

class MyStack:

    def __init__(self):
        self.stack=[]

    def push(self, x: int) -> None:
        self.stack.append(x)

    def pop(self) -> int:
       return  self.stack.pop()

    def top(self) -> int:
        return self.stack[-1]

    def empty(self) -> bool:
        if len(self.stack)==0:
            return 1
        else:
            return 0





# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()

